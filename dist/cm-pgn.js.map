{"mappings":"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","sources":["src/Pgn.js","src/Header.js","src/History.js","src/parser/pgnParser.js"],"sourcesContent":["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-pgn\n * License: MIT, see file 'LICENSE'\n */\nimport {Header, TAGS} from \"./Header.js\"\nimport {History} from \"./History.js\"\n\nexport class Pgn {\n\n    constructor(pgnString = \"\", props = {}) {\n        // only the header?\n        const lastHeaderElement =  pgnString.trim().slice(-1) === \"]\" ? pgnString.length : pgnString.lastIndexOf(\"]\\n\\n\") + 1\n        const headerString = pgnString.substring(0, lastHeaderElement)\n        const historyString = pgnString.substring(lastHeaderElement)\n        const sloppy = !!props.sloppy\n        this.header = new Header(headerString)\n        if (this.header.tags[TAGS.SetUp] === \"1\" && this.header.tags[TAGS.FEN]) {\n            this.history = new History(historyString, this.header.tags[TAGS.FEN], sloppy)\n        } else {\n            this.history = new History(historyString, null, sloppy)\n        }\n    }\n\n    wrap(str, maxLength) {\n        const words = str.split(\" \")\n        let lines = []\n        let line = \"\"\n        for (let i = 0; i < words.length; i++) {\n            const word = words[i]\n            if (line.length + word.length < maxLength) {\n                line += word + \" \"\n            } else {\n                lines.push(line.trim())\n                line = word + \" \"\n            }\n        }\n        lines.push(line.trim())\n        return lines.join(\"\\n\")\n    }\n\n    render(renderHeader = true, renderComments = true, renderNags = true) {\n        const header = renderHeader ? (this.header.render() + \"\\n\") : \"\";\n        let history = this.history.render(renderComments, renderNags);\n        if(this.header.tags[TAGS.Result]) {\n            history += \" \" + this.header.tags[TAGS.Result];\n        }\n        return header + this.wrap(history, 80)\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-pgn\n * License: MIT, see file 'LICENSE'\n */\nexport const TAGS = {\n\n    // Standard \"Seven Tag Roster\"\n    Event: \"Event\", // the name of the tournament or match event\n    Site: \"Site\", // the location of the event\n    Date: \"Date\", // the starting date of the game (format: YYYY.MM.TT)\n    Round: \"Round\", // the playing round ordinal of the game\n    White: \"White\", // the player of the white pieces (last name, pre name)\n    Black: \"Black\", // the player of the black pieces (last name, pre name)\n    Result: \"Result\", // the result of the game (1-0, 1/2-1/2, 0-1, *)\n\n    // Optional (http://www.saremba.de/chessgml/standards/pgn/pgn-complete.htm#c9)\n    //      Player related information\n    WhiteTitle: \"WhiteTitle\", BlackTitle: \"BlackTitle\", // These use string values such as \"FM\", \"IM\", and \"GM\"; these tags are used only for the standard abbreviations for FIDE titles. A value of \"-\" is used for an untitled player.\n    WhiteElo: \"WhiteElo\", BlackElo: \"BlackElo\", // These tags use integer values; these are used for FIDE Elo ratings. A value of \"-\" is used for an unrated player.\n    WhiteUSCF: \"WhiteUSCF\", BlackUSCF: \"BlackUSCF\", // These tags use integer values; these are used for USCF (United States Chess Federation) ratings. Similar tag names can be constructed for other rating agencies.\n    WhiteNA: \"WhiteNA\", BlackNA: \"BlackNA:\", // These tags use string values; these are the e-mail or network addresses of the players. A value of \"-\" is used for a player without an electronic address.\n    WhiteType: \"WhiteType\", BlackType: \"BlackType\", // These tags use string values; these describe the player types. The value \"human\" should be used for a person while the value \"program\" should be used for algorithmic (computer) players.\n    //      Event related information\n    EventDate: \"EventDate\", // This uses a date value, similar to the Date tag field, that gives the starting date of the Event.\n    EventSponsor: \"EventSponsor\", // This uses a string value giving the name of the sponsor of the event.\n    Section: \"Section\", // This uses a string; this is used for the playing section of a tournament (e.g., \"Open\" or \"Reserve\").\n    Stage: \"Stage\", // This uses a string; this is used for the stage of a multistage event (e.g., \"Preliminary\" or \"Semifinal\").\n    Board: \"Board\", // This uses an integer; this identifies the board number in a team event and also in a simultaneous exhibition.\n    //      Opening information (locale specific)\n    Opening: \"Opening\", // This uses a string; this is used for the traditional opening name. This will vary by locale. This tag pair is associated with the use of the EPD opcode \"v0\" described in a later section of this document.\n    ECO: \"ECO\", // This uses a string of either the form \"XDD\" or the form \"XDD/DD\" where the \"X\" is a letter from \"A\" to \"E\" and the \"D\" positions are digits.\n    //      Time and date related information\n    Time: \"Time\", // Time the game started, in \"HH:MM:SS\" format, in local clock time.\n    UTCTime: \"UTCTime\", // This tag is similar to the Time tag except that the time is given according to the Universal Coordinated Time standard.\n    UTCDate: \"UTCDate\", // This tag is similar to the Date tag except that the date is given according to the Universal Coordinated Time standard.\n    //      Time control\n    TimeControl: \"TimeControl\", // 40/7200:3600 (moves per seconds: sudden death seconds)\n    //      Alternative starting positions\n    SetUp: \"SetUp\", // \"0\": position is start position, \"1\": tag FEN defines the position\n    FEN: \"FEN\", //  Alternative start position, tag SetUp has to be set to \"1\"\n    //      Game conclusion\n    Termination: \"Termination\", // Gives more details about the termination of the game. It may be \"abandoned\", \"adjudication\" (result determined by third-party adjudication), \"death\", \"emergency\", \"normal\", \"rules infraction\", \"time forfeit\", or \"unterminated\".\n    //      Miscellaneous\n    Annotator: \"Annotator\", // The person providing notes to the game.\n    Mode: \"Mode\", // \"OTB\" (over-the-board) \"ICS\" (Internet Chess Server)\n    PlyCount: \"PlyCount\", // String value denoting total number of half-moves played.\n\n}\n\nexport class Header {\n\n    constructor(headerString = \"\") {\n        this.clear()\n        const rows = headerString.match(/\\[([^\\]]+)]/g)\n        if (rows && rows.length > 0) {\n            for (let i = 0; i < rows.length; i++) {\n                let tag = rows[i].match(/\\[(\\w+)\\s+\"([^\"]+)\"/)\n                if (tag) {\n                    this.tags[tag[1]] = tag[2]\n                }\n            }\n        }\n    }\n\n    clear() {\n        this.tags = {}\n    }\n\n    render() {\n        let rendered = \"\"\n        for (const tag in this.tags) {\n            rendered += `[${tag} \"${this.tags[tag]}\"]\\n`\n        }\n        return rendered\n    }\n\n}\n\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-pgn\n * License: MIT, see file 'LICENSE'\n */\nimport {pgnParser} from \"./parser/pgnParser.js\"\nimport {Chess} from \"chess.js\"\n\nfunction IllegalMoveException(fen, notation) {\n    this.fen = fen\n    this.notation = notation\n    this.toString = function () {\n        return \"IllegalMoveException: \" + fen + \" => \" + notation\n    }\n}\n\nexport class History {\n\n    constructor(historyString = null, setUpFen = null, sloppy = false) {\n        if (!historyString) {\n            this.clear()\n        } else {\n            const parsedMoves = pgnParser.parse(historyString\n                .replace(/\\s\\s+/g, \" \")\n                .replace(/\\n/g, \" \")\n            )\n            this.moves = this.traverse(parsedMoves[0], setUpFen, null, 1, sloppy)\n        }\n        this.setUpFen = setUpFen\n    }\n\n    clear() {\n        this.moves = []\n    }\n\n    traverse(parsedMoves, fen, parent = null, ply = 1, sloppy = false) {\n        const chess = fen ? new Chess(fen) : new Chess() // chess.js must be included in HTML\n        const moves = []\n        let previousMove = parent\n        for (let parsedMove of parsedMoves) {\n            if (parsedMove.notation) {\n                const notation = parsedMove.notation.notation\n                const move = chess.move(notation, {sloppy: sloppy})\n                if (move) {\n                    if (previousMove) {\n                        if (!move.previous) {\n                            move.previous = previousMove\n                        }\n                        if (!previousMove.next) {\n                            previousMove.next = move\n                        }\n                    } else {\n                        move.previous = null\n                    }\n                    move.ply = ply\n                    this.fillMoveFromChessState(move, chess)\n                    if (parsedMove.nag) {\n                        move.nag = parsedMove.nag[0]\n                    }\n                    if (parsedMove.commentBefore) {\n                        move.commentBefore = parsedMove.commentBefore\n                    }\n                    if (parsedMove.commentMove) {\n                        move.commentMove = parsedMove.commentMove\n                    }\n                    if (parsedMove.commentAfter) {\n                        move.commentAfter = parsedMove.commentAfter\n                    }\n                    move.variations = []\n                    const parsedVariations = parsedMove.variations\n                    if (parsedVariations.length > 0) {\n                        const lastFen = moves.length > 0 ? moves[moves.length - 1].fen : fen\n                        for (let parsedVariation of parsedVariations) {\n                            move.variations.push(this.traverse(parsedVariation, lastFen, previousMove, ply, sloppy))\n                        }\n                    }\n                    move.variation = moves\n                    moves.push(move)\n                    previousMove = move\n                } else {\n                    throw new IllegalMoveException(chess.fen(), notation)\n                }\n            }\n            ply++\n        }\n        return moves\n    }\n\n    fillMoveFromChessState(move, chess) {\n        move.fen = chess.fen()\n        move.uci = move.from + move.to + (move.promotion ? move.promotion : \"\")\n        move.variations = []\n        if (chess.isGameOver()) {\n            move.gameOver = true\n            if (chess.isDraw()) {\n                move.inDraw = true\n            }\n            if (chess.isStalemate()) {\n                move.inStalemate = true\n            }\n            if (chess.isInsufficientMaterial()) {\n                move.insufficientMaterial = true\n            }\n            if (chess.isThreefoldRepetition()) {\n                move.inThreefoldRepetition = true\n            }\n            if (chess.isCheckmate()) {\n                move.inCheckmate = true\n            }\n        }\n        if (chess.isCheck()) {\n            move.inCheck = true\n        }\n    }\n\n    /**\n     * @param move\n     * @return the history to the move which may be in a variation\n     */\n    historyToMove(move) {\n        const moves = []\n        let pointer = move\n        moves.push(pointer)\n        while (pointer.previous) {\n            moves.push(pointer.previous)\n            pointer = pointer.previous\n        }\n        return moves.reverse()\n    }\n\n    /**\n     * Don't add the move, just validate, if it would be correct\n     * @param notation\n     * @param previous\n     * @param sloppy\n     * @returns {[]|{}}\n     */\n    validateMove(notation, previous = null, sloppy = true) {\n        if (!previous) {\n            if (this.moves.length > 0) {\n                previous = this.moves[this.moves.length - 1]\n            }\n        }\n        const chess = new Chess(this.setUpFen ? this.setUpFen : undefined)\n        if (previous) {\n            const historyToMove = this.historyToMove(previous)\n            for (const moveInHistory of historyToMove) {\n                chess.move(moveInHistory)\n            }\n        }\n        const move = chess.move(notation, {sloppy: sloppy})\n        if (move) {\n            this.fillMoveFromChessState(move, chess)\n        }\n        return move\n    }\n\n    addMove(notation, previous = null, sloppy = true) {\n        if (!previous) {\n            if (this.moves.length > 0) {\n                previous = this.moves[this.moves.length - 1]\n            }\n        }\n        const move = this.validateMove(notation, previous, sloppy)\n        if (!move) {\n            throw new Error(\"invalid move\")\n        }\n        move.previous = previous\n        if (previous) {\n            move.ply = previous.ply + 1\n            move.uci = move.from + move.to + (move.promotion ? move.promotion : \"\")\n            if (previous.next) {\n                previous.next.variations.push([])\n                move.variation = previous.next.variations[previous.next.variations.length - 1]\n                move.variation.push(move)\n            } else {\n                previous.next = move\n                move.variation = previous.variation\n                previous.variation.push(move)\n            }\n        } else {\n            move.variation = this.moves\n            move.ply = 1\n            this.moves.push(move)\n        }\n        return move\n    }\n\n    render(renderComments = true, renderNags = true) {\n        const renderVariation = (variation, needReminder = false) => {\n            let result = \"\"\n            for (let move of variation) {\n                if (move.ply % 2 === 1) {\n                    result += Math.floor(move.ply / 2) + 1 + \". \"\n                } else if (result.length === 0 || needReminder) {\n                    result += move.ply / 2 + \"... \"\n                }\n                needReminder = false\n                if (renderNags && move.nag) {\n                    result += \"$\" + move.nag + \" \"\n                }\n                if (renderComments && move.commentBefore) {\n                    result += \"{\" + move.commentBefore + \"} \"\n                    needReminder = true\n                }\n                result += move.san + \" \"\n                if (renderComments && move.commentMove) {\n                    result += \"{\" + move.commentMove + \"} \"\n                    needReminder = true\n                }\n                if (renderComments && move.commentAfter) {\n                    result += \"{\" + move.commentAfter + \"} \"\n                    needReminder = true\n                }\n                if (move.variations.length > 0) {\n                    for (let variation of move.variations) {\n                        result += \"(\" + renderVariation(variation) + \") \"\n                        needReminder = true\n                    }\n                }\n                result += \" \"\n            }\n            return result\n        }\n        let ret = renderVariation(this.moves)\n        // remove spaces before brackets\n        ret = ret.replace(/\\s+\\)/g, ')')\n        // remove double spaces\n        ret = ret.replace(/\\s\\s+/g, ' ').trim()\n        return ret\n    }\n\n}\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { pgn: peg$parsepgn },\n      peg$startRuleFunction  = peg$parsepgn,\n\n      peg$c0 = function(pw, all) { var arr = (all ? all : []); arr.unshift(pw);return arr; },\n      peg$c1 = function(pb, all) { var arr = (all ? all : []); arr.unshift(pb); return arr; },\n      peg$c2 = function() { return [[]]; },\n      peg$c3 = function(pw) { return pw; },\n      peg$c4 = function(pb) { return pb; },\n      peg$c5 = function(cm, mn, cb, hm, nag, ca, vari, all) { var arr = (all ? all : []);\n            var move = {}; move.turn = 'w'; move.moveNumber = mn;\n            move.notation = hm; move.commentBefore = cb; move.commentAfter = ca; move.commentMove = cm;\n            move.variations = (vari ? vari : []); move.nag = (nag ? nag : null); arr.unshift(move); return arr; },\n      peg$c6 = function(cm, me, cb, hm, nag, ca, vari, all) { var arr = (all ? all : []);\n            var move = {}; move.turn = 'b'; move.moveNumber = me;\n            move.notation = hm; move.commentBefore = cb; move.commentAfter = ca;\n            move.variations = (vari ? vari : []); arr.unshift(move); move.nag = (nag ? nag : null); return arr; },\n      peg$c7 = \"1:0\",\n      peg$c8 = peg$literalExpectation(\"1:0\", false),\n      peg$c9 = function() { return [\"1:0\"]; },\n      peg$c10 = \"0:1\",\n      peg$c11 = peg$literalExpectation(\"0:1\", false),\n      peg$c12 = function() { return [\"0:1\"]; },\n      peg$c13 = \"1-0\",\n      peg$c14 = peg$literalExpectation(\"1-0\", false),\n      peg$c15 = function() { return [\"1-0\"]; },\n      peg$c16 = \"0-1\",\n      peg$c17 = peg$literalExpectation(\"0-1\", false),\n      peg$c18 = function() { return [\"0-1\"]; },\n      peg$c19 = \"1/2-1/2\",\n      peg$c20 = peg$literalExpectation(\"1/2-1/2\", false),\n      peg$c21 = function() { return [\"1/2-1/2\"]; },\n      peg$c22 = \"*\",\n      peg$c23 = peg$literalExpectation(\"*\", false),\n      peg$c24 = function() { return [\"*\"]; },\n      peg$c25 = /^[^}]/,\n      peg$c26 = peg$classExpectation([\"}\"], true, false),\n      peg$c27 = function(cm) { return cm.join(\"\").trim(); },\n      peg$c28 = \"{\",\n      peg$c29 = peg$literalExpectation(\"{\", false),\n      peg$c30 = \"}\",\n      peg$c31 = peg$literalExpectation(\"}\", false),\n      peg$c32 = function(vari, all, me) { var arr = (all ? all : []); arr.unshift(vari); return arr; },\n      peg$c33 = function(vari, all) { var arr = (all ? all : []); arr.unshift(vari); return arr; },\n      peg$c34 = \"(\",\n      peg$c35 = peg$literalExpectation(\"(\", false),\n      peg$c36 = \")\",\n      peg$c37 = peg$literalExpectation(\")\", false),\n      peg$c38 = \".\",\n      peg$c39 = peg$literalExpectation(\".\", false),\n      peg$c40 = function(num) { return num; },\n      peg$c41 = peg$otherExpectation(\"integer\"),\n      peg$c42 = /^[0-9]/,\n      peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c44 = function(digits) { return makeInteger(digits); },\n      peg$c45 = \" \",\n      peg$c46 = peg$literalExpectation(\" \", false),\n      peg$c47 = function() { return '';},\n      peg$c48 = function(fig, disc, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.disc =  (disc ? disc : null); hm.strike = (str ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.promotion = pr; hm.notation = (fig ? fig : \"\") + (disc ? disc : \"\") + (str ? str : \"\") + col + row + (pr ? pr : \"\") + (ch ? ch : \"\"); return hm; },\n      peg$c49 = function(fig, cols, rows, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str =='x' ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.notation = (fig && (fig!=='P') ? fig : \"\") + cols + rows + (str=='x' ? str : \"-\") + col  + row + (pr ? pr : \"\") + (ch ? ch : \"\"); hm.promotion = pr; return hm; },\n      peg$c50 = function(fig, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.notation = (fig ? fig : \"\") + (str ? str : \"\") + col  + row + (pr ? pr : \"\") + (ch ? ch : \"\"); hm.promotion = pr; return hm; },\n      peg$c51 = \"O-O-O\",\n      peg$c52 = peg$literalExpectation(\"O-O-O\", false),\n      peg$c53 = function(ch) { var hm = {}; hm.notation = 'O-O-O'+ (ch ? ch : \"\"); hm.check = (ch ? ch : null); return  hm; },\n      peg$c54 = \"O-O\",\n      peg$c55 = peg$literalExpectation(\"O-O\", false),\n      peg$c56 = function(ch) { var hm = {}; hm.notation = 'O-O'+ (ch ? ch : \"\"); hm.check = (ch ? ch : null); return  hm; },\n      peg$c57 = \"+-\",\n      peg$c58 = peg$literalExpectation(\"+-\", false),\n      peg$c59 = \"+\",\n      peg$c60 = peg$literalExpectation(\"+\", false),\n      peg$c61 = function(ch) { return ch[1]; },\n      peg$c62 = \"$$$\",\n      peg$c63 = peg$literalExpectation(\"$$$\", false),\n      peg$c64 = \"#\",\n      peg$c65 = peg$literalExpectation(\"#\", false),\n      peg$c66 = \"=\",\n      peg$c67 = peg$literalExpectation(\"=\", false),\n      peg$c68 = function(f) { return '=' + f; },\n      peg$c69 = function(nag, nags) { var arr = (nags ? nags : []); arr.unshift(nag); return arr; },\n      peg$c70 = \"$\",\n      peg$c71 = peg$literalExpectation(\"$\", false),\n      peg$c72 = function(num) { return '$' + num; },\n      peg$c73 = \"!!\",\n      peg$c74 = peg$literalExpectation(\"!!\", false),\n      peg$c75 = function() { return '$3'; },\n      peg$c76 = \"??\",\n      peg$c77 = peg$literalExpectation(\"??\", false),\n      peg$c78 = function() { return '$4'; },\n      peg$c79 = \"!?\",\n      peg$c80 = peg$literalExpectation(\"!?\", false),\n      peg$c81 = function() { return '$5'; },\n      peg$c82 = \"?!\",\n      peg$c83 = peg$literalExpectation(\"?!\", false),\n      peg$c84 = function() { return '$6'; },\n      peg$c85 = \"!\",\n      peg$c86 = peg$literalExpectation(\"!\", false),\n      peg$c87 = function() { return '$1'; },\n      peg$c88 = \"?\",\n      peg$c89 = peg$literalExpectation(\"?\", false),\n      peg$c90 = function() { return '$2'; },\n      peg$c91 = \"\\u203C\",\n      peg$c92 = peg$literalExpectation(\"\\u203C\", false),\n      peg$c93 = \"\\u2047\",\n      peg$c94 = peg$literalExpectation(\"\\u2047\", false),\n      peg$c95 = \"\\u2049\",\n      peg$c96 = peg$literalExpectation(\"\\u2049\", false),\n      peg$c97 = \"\\u2048\",\n      peg$c98 = peg$literalExpectation(\"\\u2048\", false),\n      peg$c99 = \"\\u25A1\",\n      peg$c100 = peg$literalExpectation(\"\\u25A1\", false),\n      peg$c101 = function() { return '$7'; },\n      peg$c102 = function() { return '$10'; },\n      peg$c103 = \"\\u221E\",\n      peg$c104 = peg$literalExpectation(\"\\u221E\", false),\n      peg$c105 = function() { return '$13'; },\n      peg$c106 = \"\\u2A72\",\n      peg$c107 = peg$literalExpectation(\"\\u2A72\", false),\n      peg$c108 = function() { return '$14'; },\n      peg$c109 = \"\\u2A71\",\n      peg$c110 = peg$literalExpectation(\"\\u2A71\", false),\n      peg$c111 = function() { return '$15';},\n      peg$c112 = \"\\xB1\",\n      peg$c113 = peg$literalExpectation(\"\\xB1\", false),\n      peg$c114 = function() { return '$16';},\n      peg$c115 = \"\\u2213\",\n      peg$c116 = peg$literalExpectation(\"\\u2213\", false),\n      peg$c117 = function() { return '$17';},\n      peg$c118 = function() { return '$18';},\n      peg$c119 = \"-+\",\n      peg$c120 = peg$literalExpectation(\"-+\", false),\n      peg$c121 = function() { return '$19';},\n      peg$c122 = \"\\u2A00\",\n      peg$c123 = peg$literalExpectation(\"\\u2A00\", false),\n      peg$c124 = function() { return '$22'; },\n      peg$c125 = \"\\u27F3\",\n      peg$c126 = peg$literalExpectation(\"\\u27F3\", false),\n      peg$c127 = function() { return '$32'; },\n      peg$c128 = \"\\u2192\",\n      peg$c129 = peg$literalExpectation(\"\\u2192\", false),\n      peg$c130 = function() { return '$36'; },\n      peg$c131 = \"\\u2191\",\n      peg$c132 = peg$literalExpectation(\"\\u2191\", false),\n      peg$c133 = function() { return '$40'; },\n      peg$c134 = \"\\u21C6\",\n      peg$c135 = peg$literalExpectation(\"\\u21C6\", false),\n      peg$c136 = function() { return '$132'; },\n      peg$c137 = \"D\",\n      peg$c138 = peg$literalExpectation(\"D\", false),\n      peg$c139 = function() { return '$220'; },\n      peg$c140 = /^[RNBQKP]/,\n      peg$c141 = peg$classExpectation([\"R\", \"N\", \"B\", \"Q\", \"K\", \"P\"], false, false),\n      peg$c142 = /^[a-h]/,\n      peg$c143 = peg$classExpectation([[\"a\", \"h\"]], false, false),\n      peg$c144 = /^[1-8]/,\n      peg$c145 = peg$classExpectation([[\"1\", \"8\"]], false, false),\n      peg$c146 = \"x\",\n      peg$c147 = peg$literalExpectation(\"x\", false),\n      peg$c148 = \"-\",\n      peg$c149 = peg$literalExpectation(\"-\", false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsepgn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepgnStartWhite();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepgnBlack();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsepgnStartBlack();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepgnWhite();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsewhiteSpace();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2();\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepgnStartWhite() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepgnWhite();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c3(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsepgnStartBlack() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepgnBlack();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsepgnWhite() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewhiteSpace();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomment();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsemoveNumber();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecomment();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhiteSpace();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsehalfMove();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsenags();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhiteSpace();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecomment();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhiteSpace();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsevariationWhite();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsepgnBlack();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c5(s2, s4, s6, s8, s10, s12, s14, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseendGame();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepgnBlack() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewhiteSpace();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomment();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsemoveEllipse();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecomment();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhiteSpace();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsehalfMove();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsenags();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhiteSpace();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecomment();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhiteSpace();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsevariationBlack();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsepgnWhite();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c6(s2, s4, s6, s8, s10, s12, s14, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseendGame();\n    }\n\n    return s0;\n  }\n\n  function peg$parseendGame() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3) === peg$c7) {\n      s1 = peg$c7;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c8); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c9();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c10) {\n        s1 = peg$c10;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c12();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 3) === peg$c13) {\n          s1 = peg$c13;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c15();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 3) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7) === peg$c19) {\n              s1 = peg$c19;\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c21();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s1 = peg$c22;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c23); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24();\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecl();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c25.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c25.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c27(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecl() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecr() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 125) {\n      s0 = peg$c30;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariationWhite() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepgnWhite();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsewhiteSpace();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevariationWhite();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsewhiteSpace();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsemoveEllipse();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c32(s2, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariationBlack() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepgnStartBlack();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsewhiteSpace();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevariationBlack();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s2, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepl() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c34;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c35); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepr() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c36;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemoveNumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseinteger();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c38;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinteger() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c42.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c44(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhiteSpace() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (input.charCodeAt(peg$currPos) === 32) {\n      s2 = peg$c45;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c46); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s2 = peg$c45;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c47();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsehalfMove() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsefigure();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parsecheckdisc();\n      peg$silentFails--;\n      if (s3 !== peg$FAILED) {\n        peg$currPos = s2;\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsediscriminator();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsestrike();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parserow();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepromotion();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecheck();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c48(s1, s3, s4, s5, s6, s7, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsefigure();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecolumn();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parserow();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsestrikeOrDash();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parserow();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsepromotion();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsecheck();\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c49(s1, s2, s3, s4, s5, s6, s7, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsefigure();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsestrike();\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsecolumn();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parserow();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsepromotion();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsecheck();\n                  if (s6 === peg$FAILED) {\n                    s6 = null;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c50(s1, s2, s3, s4, s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 5) === peg$c51) {\n            s1 = peg$c51;\n            peg$currPos += 5;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsecheck();\n            if (s2 === peg$FAILED) {\n              s2 = null;\n            }\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c53(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c54) {\n              s1 = peg$c54;\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c55); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parsecheck();\n              if (s2 === peg$FAILED) {\n                s2 = null;\n              }\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecheck() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    peg$silentFails++;\n    if (input.substr(peg$currPos, 2) === peg$c57) {\n      s3 = peg$c57;\n      peg$currPos += 2;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n    }\n    peg$silentFails--;\n    if (s3 === peg$FAILED) {\n      s2 = void 0;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s3 = peg$c59;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c60); }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c61(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 3) === peg$c62) {\n        s3 = peg$c62;\n        peg$currPos += 3;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c63); }\n      }\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s3 = peg$c64;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c61(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepromotion() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s1 = peg$c66;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c67); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefigure();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c68(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenags() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenag();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewhiteSpace();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenags();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c69(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenag() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s1 = peg$c70;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c71); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseinteger();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c73) {\n        s1 = peg$c73;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c75();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c76) {\n          s1 = peg$c76;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c78();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c79) {\n            s1 = peg$c79;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c80); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c81();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c82) {\n              s1 = peg$c82;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c83); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c84();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 33) {\n                s1 = peg$c85;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c86); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c87();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 63) {\n                  s1 = peg$c88;\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c89); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c90();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 8252) {\n                    s1 = peg$c91;\n                    peg$currPos++;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c75();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 8263) {\n                      s1 = peg$c93;\n                      peg$currPos++;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c78();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 8265) {\n                        s1 = peg$c95;\n                        peg$currPos++;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c81();\n                      }\n                      s0 = s1;\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 8264) {\n                          s1 = peg$c97;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c84();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 9633) {\n                            s1 = peg$c99;\n                            peg$currPos++;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c101();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 61) {\n                              s1 = peg$c66;\n                              peg$currPos++;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c67); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c102();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 8734) {\n                                s1 = peg$c103;\n                                peg$currPos++;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c105();\n                              }\n                              s0 = s1;\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 10866) {\n                                  s1 = peg$c106;\n                                  peg$currPos++;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c107); }\n                                }\n                                if (s1 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c108();\n                                }\n                                s0 = s1;\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 10865) {\n                                    s1 = peg$c109;\n                                    peg$currPos++;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                                  }\n                                  if (s1 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c111();\n                                  }\n                                  s0 = s1;\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    if (input.charCodeAt(peg$currPos) === 177) {\n                                      s1 = peg$c112;\n                                      peg$currPos++;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n                                    }\n                                    if (s1 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c114();\n                                    }\n                                    s0 = s1;\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$currPos;\n                                      if (input.charCodeAt(peg$currPos) === 8723) {\n                                        s1 = peg$c115;\n                                        peg$currPos++;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c116); }\n                                      }\n                                      if (s1 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c117();\n                                      }\n                                      s0 = s1;\n                                      if (s0 === peg$FAILED) {\n                                        s0 = peg$currPos;\n                                        if (input.substr(peg$currPos, 2) === peg$c57) {\n                                          s1 = peg$c57;\n                                          peg$currPos += 2;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c58); }\n                                        }\n                                        if (s1 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c118();\n                                        }\n                                        s0 = s1;\n                                        if (s0 === peg$FAILED) {\n                                          s0 = peg$currPos;\n                                          if (input.substr(peg$currPos, 2) === peg$c119) {\n                                            s1 = peg$c119;\n                                            peg$currPos += 2;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c120); }\n                                          }\n                                          if (s1 !== peg$FAILED) {\n                                            peg$savedPos = s0;\n                                            s1 = peg$c121();\n                                          }\n                                          s0 = s1;\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.charCodeAt(peg$currPos) === 10752) {\n                                              s1 = peg$c122;\n                                              peg$currPos++;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c124();\n                                            }\n                                            s0 = s1;\n                                            if (s0 === peg$FAILED) {\n                                              s0 = peg$currPos;\n                                              if (input.charCodeAt(peg$currPos) === 10227) {\n                                                s1 = peg$c125;\n                                                peg$currPos++;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c126); }\n                                              }\n                                              if (s1 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c127();\n                                              }\n                                              s0 = s1;\n                                              if (s0 === peg$FAILED) {\n                                                s0 = peg$currPos;\n                                                if (input.charCodeAt(peg$currPos) === 8594) {\n                                                  s1 = peg$c128;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c129); }\n                                                }\n                                                if (s1 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c130();\n                                                }\n                                                s0 = s1;\n                                                if (s0 === peg$FAILED) {\n                                                  s0 = peg$currPos;\n                                                  if (input.charCodeAt(peg$currPos) === 8593) {\n                                                    s1 = peg$c131;\n                                                    peg$currPos++;\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c132); }\n                                                  }\n                                                  if (s1 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c133();\n                                                  }\n                                                  s0 = s1;\n                                                  if (s0 === peg$FAILED) {\n                                                    s0 = peg$currPos;\n                                                    if (input.charCodeAt(peg$currPos) === 8646) {\n                                                      s1 = peg$c134;\n                                                      peg$currPos++;\n                                                    } else {\n                                                      s1 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                                                    }\n                                                    if (s1 !== peg$FAILED) {\n                                                      peg$savedPos = s0;\n                                                      s1 = peg$c136();\n                                                    }\n                                                    s0 = s1;\n                                                    if (s0 === peg$FAILED) {\n                                                      s0 = peg$currPos;\n                                                      if (input.charCodeAt(peg$currPos) === 68) {\n                                                        s1 = peg$c137;\n                                                        peg$currPos++;\n                                                      } else {\n                                                        s1 = peg$FAILED;\n                                                        if (peg$silentFails === 0) { peg$fail(peg$c138); }\n                                                      }\n                                                      if (s1 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c139();\n                                                      }\n                                                      s0 = s1;\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsediscriminator() {\n    var s0;\n\n    s0 = peg$parsecolumn();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserow();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecheckdisc() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsediscriminator();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsestrike();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parserow();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemoveEllipse() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseinteger();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c38;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s3 = peg$c38;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c39); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefigure() {\n    var s0;\n\n    if (peg$c140.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c141); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0;\n\n    if (peg$c142.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c143); }\n    }\n\n    return s0;\n  }\n\n  function peg$parserow() {\n    var s0;\n\n    if (peg$c144.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestrike() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 120) {\n      s0 = peg$c146;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestrikeOrDash() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 120) {\n      s0 = peg$c146;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c148;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c149); }\n      }\n    }\n\n    return s0;\n  }\n\n\n      function makeInteger(o) {\n          return parseInt(o.join(\"\"), 10);\n      }\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n/*\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n*/\nexport class pgnParser {\n  static parse(history, options) {\n    return peg$parse(history, options)\n  }\n}"],"names":[],"version":3,"file":"cm-pgn.js.map"}